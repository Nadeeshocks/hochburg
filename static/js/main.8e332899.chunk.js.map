{"version":3,"sources":["components/background.js","components/toggler.js","components/hochburgMenu.js","components/navbar.js","components/layout.js","components/loader.js","app.js","serviceWorker.js","index.js"],"names":["className","autoPlay","loop","muted","crossorigin","preload","playsinline","type","src","onClick","toggle","props","useState","collapse","setCollapse","Navbar","color","light","NavbarBrand","href","class","Collapse","isOpen","Container","fluid","Row","Col","xs","App","state","show","renderApp","setTimeout","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAEgB,aACd,OACE,yBAAKA,UAAU,oBACb,2BAAOC,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACC,YAAY,OAAOC,QAAQ,WAAWC,YAAY,QAC3E,4BACEC,KAAK,YAAYC,IAAI,0I,gECJhB,G,MAAA,YAA0B,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACzB,OACE,kBAAC,WAAD,KACE,yBAAKD,QAASA,EAAST,UAAS,uBAAkBU,EAAS,SAAW,KACpE,+BACA,mCCNO,aACb,OACE,yBAAKV,UAAU,QACb,yBAAKA,UAAU,cAGf,yBAAKA,UAAU,iBCFN,WAACW,GAAW,IAAD,EACQC,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,KAIxB,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACjB,UAAU,aACpC,kBAACkB,EAAA,EAAD,CAAaC,KAAK,IAAInB,UAAU,cAAhC,YACA,0BAAMoB,MAAM,2BAAZ,eAAkD,6BAAlD,iBACA,kBAAC,EAAD,CAASX,QANE,kBAAMK,GAAaD,IAMJH,OAAQG,IAClC,kBAACQ,EAAA,EAAD,CAAUC,OAAQT,GAChB,kBAAC,EAAD,SCXO,aACb,OACE,yBAAKb,UAAU,UACb,kBAACuB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACR,kBAACD,EAAA,EAAD,CAAKC,GAAG,UCbH,G,YAAA,WACb,OACE,yBAAK3B,UAAU,cACb,yBAAKA,UAAU,kBACb,4BACE,oCCiCK4B,E,2MAlCbC,MAAQ,CACNC,MAAM,G,EAURC,UAAY,WAEV,OADiB,EAAKF,MAAdC,KAGJ,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAKG,kBAAC,EAAD,O,mFAnBU,IAAD,OAClBE,YAAW,WACT,EAAKC,SAAS,CACZH,MAAM,MAEP,O,+BAkBH,OACE,yBAAK9B,UAAU,OACZkC,KAAKH,iB,GA7BII,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e332899.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default  () => {\r\n  return (\r\n    <div className=\"background_video\">\r\n      <video autoPlay loop muted crossorigin=\"true\" preload=\"metadata\" playsinline=\"true\">\r\n        <source\r\n          type=\"video/mp4\" src=\"https://hochburg.cdn.prismic.io/hochburg%2Fbac0c4c9-0c31-4bd2-9c6a-ceec154186cd_hoc_website_background_bike_leica_1-compressed.mp4\" />\r\n      </video>\r\n    </div>\r\n  )\r\n}","import React, { Fragment } from 'react';\r\nimport '../css/toggler.css';\r\n\r\nexport default ({ onClick, toggle }) => {\r\n  return (\r\n    <Fragment>\r\n      <div onClick={onClick} className={`menu-toggler ${toggle ? 'active' : ''}`}>\r\n        <span></span>\r\n        <span></span>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n  {/* <img src=\"/svg/menu-icon.svg\" alt=\"\" onClick={props.onClick}/> */ }\r\n}\r\n","import React from 'react'\r\n\r\nexport default ()=>{\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"left-menu\">\r\n\r\n      </div>\r\n      <div className=\"right-menu\">\r\n      \r\n      </div>      \r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { Button, CardBody, Card } from 'reactstrap';\r\nimport Toggler from './toggler';\r\nimport HochburgMenu from './hochburgMenu';\r\n\r\nexport default (props) => {\r\n  const [collapse, setCollapse] = useState(false);\r\n  const toggle = () => setCollapse(!collapse);\r\n\r\n  return (\r\n    <Navbar color=\"faded\" light className=\"mt-5 my-3\">\r\n      <NavbarBrand href=\"/\" className=\"text-white\">Hochburg</NavbarBrand>  \r\n      <span class=\"text-light mr-auto ml-5\">branding and<br/>communication</span> \r\n      <Toggler onClick={toggle} toggle={collapse}/>\r\n      <Collapse isOpen={collapse}>\r\n        <HochburgMenu />\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport '../css/layout.css';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Navbar from './navbar';\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"layout\">\r\n      <Container fluid>     \r\n        <Row>\r\n          <Col>\r\n            <Navbar />\r\n          </Col>\r\n        </Row> \r\n        <Row>\r\n          <Col xs=\"6\"></Col>\r\n          <Col xs=\"6\"></Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport '../css/loader.css';\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"app-loader\">\r\n      <div className=\"text-container\">\r\n        <h1>\r\n          <span></span>\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Fragment } from 'react';\nimport Background from './components/background';\nimport Layout from './components/layout';\nimport './css/app.css';\nimport Loader from './components/loader';\n\nclass App extends React.Component {\n  state = {\n    show: false\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        show: true\n      })\n    }, 3000)\n\n  }\n  renderApp = () => {\n    const { show } = this.state;\n    if (show) {\n      return (\n        <Fragment>\n          <Background />\n          <Layout />\n        </Fragment>\n      )\n    }\n    else\n      return <Loader />\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        {this.renderApp()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}